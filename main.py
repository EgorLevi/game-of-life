import random
import time
import json

class Cell:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.alive = False

# class Matrix:
#     def __init__(self, global_sige):
#         self.gsize = global_sige
#         self.matrix = create_matrix(self.gsize)
    
def create_matrix(x):
        matrix = []
        for i in range(x):
            for j in range(x):
                matrix.append(Cell(i,j))
        return matrix


def print_matrix(matrix):
    # –¥–ª—è –∫–æ–Ω—Å–æ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–∑–∏ 
    cell_life_sigths = {True:"üü¢", False:"‚¨õ"}
    # –¥–ª—è –∫–æ–Ω—Å–æ–ª–µ–π —Å –±—É–∫–æ–≤–∞–º–∏
    #cell_life_sigths = {True:"‚óâ", False:"‚óØ"}

    for i in range(Matrix_global_size*Matrix_global_size):
        if i%10 == 0 and i >1:
            print()
        print(cell_life_sigths[matrix[i].alive], end=' ')

def print_cells_cordinates(matrix):
    i = 0
    for cell in matrix:
        if i%10 == 0 and i >1:
            print()
        print(f"({cell.x},{cell.y})", end=' ')
        i += 1
    print()

def create_some_life(matrix):
    for _ in range(int(matrix.__len__())):
        pos = random.randint(0, matrix.__len__()-1)
        matrix[pos].alive = True
    return matrix

def life_gos_on(matrix):
    d = 0

    while 1:
        d+=1 #—Å—á–µ—Ç—á–∏–∫ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        control_matrix = [] # –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è

        # —Ä–∞–∞—Å–ø–µ—á–∞—Ç–∫–∏
        print(f"\n_____________–ü–æ–∫–æ–ª–µ–Ω–∏–µ {d}_________")
        print_matrix(matrix)

        for i in range(matrix.__len__()):
            # —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å–µ–¥–µ–π
            aln = []

            if matrix[i].x != 0:
                # –µ—Å—Ç—å —Å–æ—Å–µ–¥–∏ —Å–≤–µ—Ä—Ö—É
                # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π —Å–≤–µ—Ä—Ö—É
                # 1 —Å–æ—Å–µ–¥ –ø—Ä—è–º–æ –Ω–∞–¥ —è—á–µ–π–∫–æ–π
                aln.append(matrix[i-Matrix_global_size].alive)

                # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å–µ–¥ —Å–≤–µ—Ä—Ö—É-—Å–ª–µ–≤–∞ -- –¥–æ–±–∞–≤–ª—è–µ–º
                if matrix[i].y != 0:
                    aln.append(matrix[i-Matrix_global_size-1].alive)
                # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å–µ–¥ —Å–≤–µ—Ä—Ö—É-—Å–ø—Ä–∞–≤–∞ -- –¥–æ–±–∞–≤–ª—è–µ–º
                if matrix[i].y != Matrix_global_size-1:
                    aln.append(matrix[i-Matrix_global_size+1].alive)

            if matrix[i].x != Matrix_global_size-1:
                # –µ—Å—Ç—å —Å–æ—Å–µ–¥–∏ —Å–Ω–∏–∑—É
                aln.append(matrix[i+Matrix_global_size].alive)

                # –µ—Å–ª–∏ –µ—Å—Ç—å –µ—Å—Ç—å —Å–Ω–∏–∑—É-—Å–ª–µ–≤–∞
                if matrix[i].y != 0:
                    aln.append(matrix[i+Matrix_global_size-1].alive)
                # –µ—Å–ª–∏ –µ—Å—Ç—å –µ—Å—Ç—å —Å–Ω–∏–∑—É-—Å–ø—Ä–∞–≤–∞
                if matrix[i].y != Matrix_global_size-1:
                    aln.append(matrix[i+Matrix_global_size+1].alive)
                pass

            if matrix[i].y != 0:
                # –µ—Å—Ç—å —Å–æ—Å–µ–¥–∏ —Å–ª–µ–≤–∞
                aln.append(matrix[i-1].alive)

            if matrix[i].y != Matrix_global_size-1:
                # –µ—Å—Ç—å —Å–æ—Å–µ–¥–∏ —Å–ø—Ä–∞–≤–∞
                aln.append(matrix[i+1].alive)
                pass

            #—Å—á–∏—Ç–∞–µ–º —Å–æ—Å–µ–¥–µ–π –∏ –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏
            aln = aln.count(True)
            if matrix[i].alive:
                if aln ==2 or aln ==3:
                    pass
                else:
                    matrix[i].alive = False

            else:
                if aln > 3:
                    matrix[i].alive = True

            control_matrix.append(matrix[i])

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á—É—é –º–∞—Ç—Ä–∏—Ü—É

        matrix = control_matrix[:]
        control_matrix = []
        time.sleep(1)
        # –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏, –Ω–æ –≤–º–µ—Ç–≤–æ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞
        # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–≤—É—Ç—Å–≤–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –∑–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü
Matrix_global_size = 10 # —Ç—É—Ç –∏–º–µ–µ—Ç—Å—è –≤–≤–∏–¥—É 10*10, —Ç–µ –≤—Å–µ–≥–æ 100 —è—á–µ–µ–∫
m = create_matrix(Matrix_global_size)
m = create_some_life(m)
# print_cells_cordinates(m) #–¢–ï–°–¢–û–í–ê–Ø - —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —è—á–µ–µ–∫
# print_matrix(m) #–¢–ï–°–¢–û–í–ê–Ø - —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã
life_gos_on(m)



